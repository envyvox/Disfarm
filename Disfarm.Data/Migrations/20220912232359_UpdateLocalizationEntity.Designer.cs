// <auto-generated />
using System;
using Disfarm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Disfarm.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220912232359_UpdateLocalizationEntity")]
    partial class UpdateLocalizationEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Disfarm.Data.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_banners");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banners_name");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.HasKey("Id")
                        .HasName("pk_crops");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_name");

                    b.HasIndex("SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_seed_id");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Fish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CatchSeasons")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("catch_seasons");

                    b.Property<byte>("CatchTimesDay")
                        .HasColumnType("smallint")
                        .HasColumnName("catch_times_day");

                    b.Property<byte>("CatchWeather")
                        .HasColumnType("smallint")
                        .HasColumnName("catch_weather");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.HasKey("Id")
                        .HasName("pk_fishes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_fishes_name");

                    b.ToTable("fishes");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Guild", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_guilds");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_guilds_id");

                    b.ToTable("guilds");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Image", b =>
                {
                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Type")
                        .HasName("pk_images");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_images_type");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Localization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Double")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("double");

                    b.Property<byte>("Language")
                        .HasColumnType("smallint")
                        .HasColumnName("language");

                    b.Property<string>("Multiply")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("multiply");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Single")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("single");

                    b.HasKey("Id")
                        .HasName("pk_localizations");

                    b.HasIndex("Category", "Language", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_localizations_category_language_name");

                    b.ToTable("localizations");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Seed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("GrowthDays")
                        .HasColumnType("bigint")
                        .HasColumnName("growth_days");

                    b.Property<bool>("IsMultiply")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multiply");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long>("ReGrowthDays")
                        .HasColumnType("bigint")
                        .HasColumnName("re_growth_days");

                    b.Property<byte>("Season")
                        .HasColumnType("smallint")
                        .HasColumnName("season");

                    b.HasKey("Id")
                        .HasName("pk_seeds");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seeds_name");

                    b.ToTable("seeds");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<string>("CommandColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Fraction")
                        .HasColumnType("smallint")
                        .HasColumnName("fraction");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<byte>("Language")
                        .HasColumnType("smallint")
                        .HasColumnName("language");

                    b.Property<long>("Level")
                        .HasColumnType("bigint")
                        .HasColumnName("level");

                    b.Property<byte>("Title")
                        .HasColumnType("smallint")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid")
                        .HasColumnName("banner_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_banners");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_banners_banner_id");

                    b.HasIndex("UserId", "BannerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_banners_user_id_banner_id");

                    b.ToTable("user_banners");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_collections");

                    b.HasIndex("UserId", "Category", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_collections_user_id_category_item_id");

                    b.ToTable("user_collections");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserContainer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_containers");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_containers_user_id_type");

                    b.ToTable("user_containers");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCooldown", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cooldowns");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_cooldowns_user_id_type");

                    b.ToTable("user_cooldowns");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCrop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CropId")
                        .HasColumnType("uuid")
                        .HasColumnName("crop_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_crops");

                    b.HasIndex("CropId")
                        .HasDatabaseName("ix_user_crops_crop_id");

                    b.HasIndex("UserId", "CropId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_crops_user_id_crop_id");

                    b.ToTable("user_crops");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_currencies");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_currencies_user_id_type");

                    b.ToTable("user_currencies");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserDailyReward", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_daily_rewards");

                    b.HasIndex("UserId", "DayOfWeek")
                        .IsUnique()
                        .HasDatabaseName("ix_user_daily_rewards_user_id_day_of_week");

                    b.ToTable("user_daily_rewards");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserFish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FishId")
                        .HasColumnType("uuid")
                        .HasColumnName("fish_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_fishes");

                    b.HasIndex("FishId")
                        .HasDatabaseName("ix_user_fishes_fish_id");

                    b.HasIndex("UserId", "FishId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_fishes_user_id_fish_id");

                    b.ToTable("user_fishes");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserSeed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_seeds");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_user_seeds_seed_id");

                    b.HasIndex("UserId", "SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_seeds_user_id_seed_id");

                    b.ToTable("user_seeds");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_titles");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_titles_user_id_type");

                    b.ToTable("user_titles");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.WorldProperty", b =>
                {
                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Type")
                        .HasName("pk_world_properties");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_world_properties_type");

                    b.ToTable("world_properties");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.WorldState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("CurrentSeason")
                        .HasColumnType("smallint")
                        .HasColumnName("current_season");

                    b.Property<byte>("WeatherToday")
                        .HasColumnType("smallint")
                        .HasColumnName("weather_today");

                    b.Property<byte>("WeatherTomorrow")
                        .HasColumnType("smallint")
                        .HasColumnName("weather_tomorrow");

                    b.HasKey("Id")
                        .HasName("pk_world_states");

                    b.ToTable("world_states");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Crop", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.Seed", "Seed")
                        .WithOne("Crop")
                        .HasForeignKey("Disfarm.Data.Entities.Crop", "SeedId")
                        .HasConstraintName("fk_crops_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserBanner", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .HasConstraintName("fk_user_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_banners_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCollection", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_collections_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserContainer", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_containers_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCooldown", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_cooldowns_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCrop", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .HasConstraintName("fk_user_crops_crops_crop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_crops_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserCurrency", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_currencies_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserDailyReward", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_daily_rewards_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserFish", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .HasConstraintName("fk_user_fishes_fishes_fish_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_fishes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserSeed", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_user_seeds_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_seeds_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.User.UserTitle", b =>
                {
                    b.HasOne("Disfarm.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_titles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Disfarm.Data.Entities.Seed", b =>
                {
                    b.Navigation("Crop");
                });
#pragma warning restore 612, 618
        }
    }
}
